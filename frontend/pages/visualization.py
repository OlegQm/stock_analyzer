import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.app_client import get_available_stocks, get_visualization_data

st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", page_icon="üìä", layout="wide"
)

st.title("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
plt.style.use("ggplot")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    available_stocks = get_available_stocks()
    stock_options = {
        stock["symbol"]: f"{stock['symbol']} - {stock['name']}"
        for stock in available_stocks
    }
    chart_type = st.selectbox(
        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
        options=["price", "returns", "correlation"],
        format_func=lambda x: {
            "price": "–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω",
            "returns": "–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏",
            "correlation": "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞",
        }.get(x, x),
    )
    selected_symbols = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏",
        options=list(stock_options.keys()),
        format_func=lambda x: stock_options[x],
        default=[available_stocks[0]["symbol"]],
    )
    period_options = {"1 –≥–æ–¥": "1y", "2 –≥–æ–¥–∞": "2y", "5 –ª–µ—Ç": "5y"}
    selected_period_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", options=list(period_options.keys()), index=0
    )
    selected_period = period_options[selected_period_display]
    visualize_button = st.button("–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
if visualize_button and selected_symbols:
    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏..."):
        visualization_data = get_visualization_data(
            selected_symbols, chart_type, selected_period, "1d"
        )

    if visualization_data and "error" not in visualization_data:
        if chart_type == "price":
            st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∏ –æ–±—ä–µ–º–æ–≤")
            fig, (ax1, ax2) = plt.subplots(
                2,
                1,
                figsize=(12, 8),
                sharex=True,
                gridspec_kw={"height_ratios": [3, 1]},
            )
            fig.suptitle(f"–¶–µ–Ω—ã –∞–∫—Ü–∏–π - {selected_period_display}", fontsize=16)

            for stock_data in visualization_data["data"]:
                symbol = stock_data["symbol"]
                df = pd.DataFrame(
                    {
                        "Date": pd.to_datetime(stock_data["dates"]),
                        "Price": stock_data["prices"],
                        "Volume": stock_data["volumes"],
                    }
                )
                ax1.plot(df["Date"], df["Price"], label=symbol)
                ax2.bar(df["Date"], df["Volume"], label=symbol, alpha=0.5)

            ax1.set_ylabel("–¶–µ–Ω–∞ ($)")
            ax1.legend()
            ax1.grid(True)
            ax2.set_ylabel("–û–±—ä–µ–º")
            ax2.legend()
            ax2.grid(True)
            plt.xlabel("–î–∞—Ç–∞")
            plt.tight_layout(rect=[0, 0, 1, 0.96])
            st.pyplot(fig)

        elif chart_type == "returns":
            st.subheader("–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–π")
            fig, (ax1, ax2) = plt.subplots(
                2, 1, figsize=(12, 8), sharex=True
            )
            fig.suptitle(
                f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–π - {selected_period_display}", fontsize=16
            )

            for stock_data in visualization_data["data"]:
                symbol = stock_data["symbol"]
                df = pd.DataFrame(
                    {
                        "Date": pd.to_datetime(stock_data["dates"]),
                        "Daily": stock_data["daily_returns"],
                        "Cumulative": stock_data["cumulative_returns"],
                    }
                )
                ax1.plot(df["Date"], df["Daily"], label=symbol, alpha=0.7)
                ax2.plot(df["Date"], df["Cumulative"], label=symbol)

            ax1.set_title("–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            ax1.set_ylabel("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            ax1.legend()
            ax1.grid(True)
            ax2.set_title("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            ax2.set_ylabel("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            ax2.legend()
            ax2.grid(True)
            plt.xlabel("–î–∞—Ç–∞")
            plt.tight_layout(rect=[0, 0, 1, 0.96])
            st.pyplot(fig)

        elif chart_type == "correlation":
            st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–π")
            if len(selected_symbols) < 2:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö –∞–∫—Ü–∏–π.")
            else:
                corr_matrix = pd.DataFrame(
                    index=selected_symbols, columns=selected_symbols
                )
                for item in visualization_data["data"]:
                    corr_matrix.loc[item["x"], item["y"]] = item["value"]
                corr_matrix = corr_matrix.astype(float)

                fig, ax = plt.subplots(figsize=(8, 6))
                im = ax.imshow(corr_matrix, cmap="coolwarm", vmin=-1, vmax=1)

                fig.colorbar(im, ax=ax)
                ax.set_xticks(np.arange(len(selected_symbols)))
                ax.set_yticks(np.arange(len(selected_symbols)))
                ax.set_xticklabels(selected_symbols)
                ax.set_yticklabels(selected_symbols)
                plt.setp(
                    ax.get_xticklabels(),
                    rotation=45,
                    ha="right",
                    rotation_mode="anchor",
                )

                for i in range(len(selected_symbols)):
                    for j in range(len(selected_symbols)):
                        ax.text(
                            j,
                            i,
                            f"{corr_matrix.iloc[i, j]:.2f}",
                            ha="center",
                            va="center",
                            color="w",
                        )

                ax.set_title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
                plt.tight_layout()
                st.pyplot(fig)
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏ –∏ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é'.")
