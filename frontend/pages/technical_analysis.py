import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.app_client import (
    get_available_stocks,
    get_stock_data,
    get_technical_analysis,
)

st.set_page_config(
    page_title="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", page_icon="üìâ", layout="wide"
)

st.title("üìâ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è matplotlib
plt.style.use("ggplot")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ—Å–∏ (ax)
def plot_candlestick(ax, df):
    width = 0.6
    width2 = width * 0.8
    up = df[df.Close >= df.Open]
    down = df[df.Close < df.Open]

    ax.bar(
        up.index,
        up.Close - up.Open,
        width,
        bottom=up.Open,
        color="green",
        alpha=0.5,
    )
    ax.bar(
        up.index,
        up.High - up.Close,
        width2,
        bottom=up.Close,
        color="green",
        alpha=0.8,
    )
    ax.bar(
        up.index,
        up.Open - up.Low,
        width2,
        bottom=up.Low,
        color="green",
        alpha=0.8,
    )
    ax.bar(
        down.index,
        down.Open - down.Close,
        width,
        bottom=down.Close,
        color="red",
        alpha=0.5,
    )
    ax.bar(
        down.index,
        down.High - down.Open,
        width2,
        bottom=down.Open,
        color="red",
        alpha=0.8,
    )
    ax.bar(
        down.index,
        down.Close - down.Low,
        width2,
        bottom=down.Low,
        color="red",
        alpha=0.8,
    )
    ax.set_ylabel("–¶–µ–Ω–∞ ($)")


# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    available_stocks = get_available_stocks()
    stock_options = {
        f"{stock['symbol']} - {stock['name']}": stock["symbol"]
        for stock in available_stocks
    }
    selected_stock_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é", options=list(stock_options.keys())
    )
    selected_stock = stock_options[selected_stock_display]
    period_options = {
        "3 –º–µ—Å—è—Ü–∞": "3mo",
        "6 –º–µ—Å—è—Ü–µ–≤": "6mo",
        "1 –≥–æ–¥": "1y",
        "2 –≥–æ–¥–∞": "2y",
    }
    selected_period_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", options=list(period_options.keys()), index=2
    )
    selected_period = period_options[selected_period_display]

    st.subheader("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    use_sma = st.checkbox("SMA", value=True)
    use_ema = st.checkbox("EMA", value=True)
    use_rsi = st.checkbox("RSI", value=True)
    use_macd = st.checkbox("MACD", value=True)
    use_bollinger = st.checkbox("Bollinger Bands", value=False)

    selected_indicators = []
    if use_sma:
        selected_indicators.append("sma")
    if use_ema:
        selected_indicators.append("ema")
    if use_rsi:
        selected_indicators.append("rsi")
    if use_macd:
        selected_indicators.append("macd")
    if use_bollinger:
        selected_indicators.append("bollinger")

    analyze_button = st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑")

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
if analyze_button:
    with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."):
        stock_data = get_stock_data(selected_stock, selected_period, "1d")
        tech_analysis = get_technical_analysis(
            selected_stock, selected_period, "1d", selected_indicators
        )

    if stock_data and tech_analysis:
        df = pd.DataFrame(stock_data["data"])
        df["Date"] = pd.to_datetime(df["Date"])
        df.set_index("Date", inplace=True)
        indicators = tech_analysis["indicators"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
        num_subplots = 1 + use_rsi + use_macd
        height_ratios = [0.6] + [0.2] * (num_subplots - 1)

        fig, axes = plt.subplots(
            num_subplots,
            1,
            figsize=(12, 3 * num_subplots),
            sharex=True,
            gridspec_kw={"height_ratios": height_ratios},
        )
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫, axes –Ω–µ –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤–æ–º
        if num_subplots == 1:
            axes = [axes]

        # --- –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –Ω–µ–º ---
        ax1 = axes[0]
        plot_candlestick(ax1, df)
        ax1.set_title(f"–¶–µ–Ω–∞ {selected_stock}")

        if use_sma:
            if "sma_20" in indicators:
                ax1.plot(df.index, indicators["sma_20"], label="SMA 20")
            if "sma_50" in indicators:
                ax1.plot(df.index, indicators["sma_50"], label="SMA 50")
        if use_ema:
            if "ema_20" in indicators:
                ax1.plot(
                    df.index,
                    indicators["ema_20"],
                    label="EMA 20",
                    linestyle="--",
                )
        if use_bollinger:
            ax1.plot(
                df.index,
                indicators["bollinger_high"],
                label="Bollinger High",
                color="gray",
                linestyle=":",
            )
            ax1.plot(
                df.index,
                indicators["bollinger_low"],
                label="Bollinger Low",
                color="gray",
                linestyle=":",
            )
            ax1.fill_between(
                df.index,
                indicators["bollinger_high"],
                indicators["bollinger_low"],
                color="gray",
                alpha=0.1,
            )

        # --- –ì—Ä–∞—Ñ–∏–∫–∏ RSI –∏ MACD ---
        current_ax_index = 1
        if use_rsi:
            ax_rsi = axes[current_ax_index]
            ax_rsi.plot(df.index, indicators["rsi_14"], label="RSI 14")
            ax_rsi.axhline(70, color="red", linestyle="--", linewidth=1)
            ax_rsi.axhline(30, color="green", linestyle="--", linewidth=1)
            ax_rsi.set_ylabel("RSI")
            ax_rsi.set_ylim(0, 100)
            current_ax_index += 1

        if use_macd:
            ax_macd = axes[current_ax_index]
            ax_macd.plot(
                df.index, indicators["macd_line"], label="MACD Line"
            )
            ax_macd.plot(
                df.index, indicators["macd_signal"], label="Signal Line"
            )
            colors = [
                "green" if val >= 0 else "red"
                for val in indicators["macd_histogram"]
            ]
            ax_macd.bar(
                df.index,
                indicators["macd_histogram"],
                label="Histogram",
                color=colors,
                alpha=0.5,
            )
            ax_macd.set_ylabel("MACD")
            current_ax_index += 1

        # –û–±—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        fig.suptitle(
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {selected_stock} - {selected_period_display}",
            fontsize=16,
        )
        fig.legend(loc="upper right")
        plt.xlabel("–î–∞—Ç–∞")
        plt.tight_layout(rect=[0, 0, 1, 0.96])
        st.pyplot(fig)
        st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            last_close = df['Close'].iloc[-1]
            
            if use_sma:
                st.write("### SMA (Simple Moving Average)")
                
                if 'sma_20' in indicators and 'sma_50' in indicators:
                    sma_20_last = indicators['sma_20'][-1]
                    sma_50_last = indicators['sma_50'][-1]
                    
                    st.write(f"SMA 20: {sma_20_last:.2f}")
                    st.write(f"SMA 50: {sma_50_last:.2f}")
                    
                    if last_close > sma_20_last and last_close > sma_50_last:
                        st.write("üìà –¶–µ–Ω–∞ –≤—ã—à–µ SMA 20 –∏ SMA 50 - **–±—ã—á–∏–π** —Å–∏–≥–Ω–∞–ª.")
                    elif last_close < sma_20_last and last_close < sma_50_last:
                        st.write("üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA 20 –∏ SMA 50 - **–º–µ–¥–≤–µ–∂–∏–π** —Å–∏–≥–Ω–∞–ª.")
                    elif sma_20_last > sma_50_last:
                        st.write("üìà SMA 20 –≤—ã—à–µ SMA 50 - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π **–±—ã—á–∏–π** —Ç—Ä–µ–Ω–¥.")
                    else:
                        st.write("üìâ SMA 20 –Ω–∏–∂–µ SMA 50 - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π **–º–µ–¥–≤–µ–∂–∏–π** —Ç—Ä–µ–Ω–¥.")
            
            if use_rsi and 'rsi_14' in indicators:
                st.write("### RSI (Relative Strength Index)")
                
                rsi_last = indicators['rsi_14'][-1]
                st.write(f"RSI (14): {rsi_last:.2f}")
                
                if rsi_last > 70:
                    st.write("üìâ RSI –≤—ã—à–µ 70 - –∞–∫—Ç–∏–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å **–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω**.")
                elif rsi_last < 30:
                    st.write("üìà RSI –Ω–∏–∂–µ 30 - –∞–∫—Ç–∏–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å **–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω**.")
                else:
                    st.write("‚û°Ô∏è RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ.")
            
            if use_macd and 'macd_line' in indicators and 'macd_signal' in indicators:
                st.write("### MACD (Moving Average Convergence Divergence)")
                
                macd_last = indicators['macd_line'][-1]
                signal_last = indicators['macd_signal'][-1]
                histogram_last = indicators['macd_histogram'][-1] if 'macd_histogram' in indicators else macd_last - signal_last
                
                st.write(f"MACD Line: {macd_last:.2f}")
                st.write(f"Signal Line: {signal_last:.2f}")
                st.write(f"Histogram: {histogram_last:.2f}")
                
                if macd_last > signal_last:
                    st.write("üìà MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ - **–±—ã—á–∏–π** —Å–∏–≥–Ω–∞–ª.")
                else:
                    st.write("üìâ MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ - **–º–µ–¥–≤–µ–∂–∏–π** —Å–∏–≥–Ω–∞–ª.")
                
                if histogram_last > 0 and indicators['macd_histogram'][-2] <= 0:
                    st.write("üìà –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π **—Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ**.")
                elif histogram_last < 0 and indicators['macd_histogram'][-2] >= 0:
                    st.write("üìâ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π **—Å–∏–≥–Ω–∞–ª –∫ –ø—Ä–æ–¥–∞–∂–µ**.")
            
            if use_bollinger and 'bollinger_high' in indicators and 'bollinger_low' in indicators:
                st.write("### Bollinger Bands")
                
                upper_last = indicators['bollinger_high'][-1]
                lower_last = indicators['bollinger_low'][-1]
                
                st.write(f"–í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞: {upper_last:.2f}")
                st.write(f"–ù–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞: {lower_last:.2f}")
                
                if last_close > upper_last:
                    st.write("üìâ –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –∞–∫—Ç–∏–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å **–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω**.")
                elif last_close < lower_last:
                    st.write("üìà –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –∞–∫—Ç–∏–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å **–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω**.")
                else:
                    st.write("‚û°Ô∏è –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - **–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π** —Å–∏–≥–Ω–∞–ª.")
            
            st.warning("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.")
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑'.")
