import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ api_client
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.app_client import (
    get_available_stocks,
    run_hypothesis_test,
    get_stock_data,  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
)

st.set_page_config(
    page_title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑", page_icon="üß™", layout="wide"
)

st.title("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≥–∏–ø–æ—Ç–µ–∑")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ Matplotlib
plt.style.use("ggplot")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π —Å –±—ç–∫–µ–Ω–¥–∞
    available_stocks = get_available_stocks()
    stock_options = {
        stock["symbol"]: f"{stock['symbol']} - {stock['name']}"
        for stock in available_stocks
    }

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    test_type = st.selectbox(
        "–¢–∏–ø —Ç–µ—Å—Ç–∞",
        options=["normality", "correlation", "mean_comparison"],
        format_func=lambda x: {
            "normality": "–¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å",
            "correlation": "–¢–µ—Å—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é",
            "mean_comparison": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏",
        }.get(x, x),
    )

    # –í—ã–±–æ—Ä –∞–∫—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if test_type == "normality":
        # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –Ω—É–∂–Ω–∞ –æ–¥–Ω–∞ –∞–∫—Ü–∏—è
        selected_symbol1 = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é",
            options=list(stock_options.keys()),
            format_func=lambda x: stock_options[x],
        )
        selected_symbols = [selected_symbol1]
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤ –Ω—É–∂–Ω—ã –¥–≤–µ –∞–∫—Ü–∏–∏
        selected_symbol1 = st.selectbox(
            "–ü–µ—Ä–≤–∞—è –∞–∫—Ü–∏—è",
            options=list(stock_options.keys()),
            format_func=lambda x: stock_options[x],
        )
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π
        remaining_options = {
            k: v for k, v in stock_options.items() if k != selected_symbol1
        }
        selected_symbol2 = st.selectbox(
            "–í—Ç–æ—Ä–∞—è –∞–∫—Ü–∏—è",
            options=list(remaining_options.keys()),
            format_func=lambda x: stock_options[x],
        )
        selected_symbols = [selected_symbol1, selected_symbol2]

    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    period_options = {"1 –≥–æ–¥": "1y", "2 –≥–æ–¥–∞": "2y", "5 –ª–µ—Ç": "5y"}
    selected_period_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", options=list(period_options.keys()), index=0
    )
    selected_period = period_options[selected_period_display]

    # –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
    alpha = st.slider("–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha)", 0.01, 0.10, 0.05, 0.01)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    test_button = st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
if test_button:
    with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞..."):
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç –≥–∏–ø–æ—Ç–µ–∑—ã —á–µ—Ä–µ–∑ API
        test_result = run_hypothesis_test(
            selected_symbols, test_type, selected_period, alpha
        )

    if test_result and "error" not in test_result:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")

        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å ---
        if test_type == "normality":
            st.write(
                f"**–¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è {selected_symbols[0]}**"
            )
            st.write(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞ (–®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞): {test_result['statistic']:.4f}")
            st.write(f"P-–∑–Ω–∞—á–µ–Ω–∏–µ: {test_result['p_value']:.4f}")
            st.write(f"–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha): {alpha}")

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if test_result["p_value"] > alpha:
                st.success(
                    f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏ {selected_symbols[0]} —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º."
                )
            else:
                st.warning(
                    f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏ {selected_symbols[0]} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º."
                )
            st.write(test_result["conclusion"])

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞..."):
                data = get_stock_data(
                    selected_symbols[0], selected_period, "1d"
                )
                if data:
                    df = pd.DataFrame(data["data"])
                    df["Returns"] = df["Close"].pct_change().dropna()
                    returns = df["Returns"].fillna(0)

                    # –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∏ –∫—Ä–∏–≤—É—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.hist(
                        returns,
                        bins=50,
                        density=True,
                        alpha=0.6,
                        color="g",
                        label="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏",
                    )

                    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∫—Ä–∏–≤—É—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    mu, std = stats.norm.fit(returns)
                    xmin, xmax = plt.xlim()
                    x = np.linspace(xmin, xmax, 100)
                    p = stats.norm.pdf(x, mu, std)
                    ax.plot(
                        x,
                        p,
                        "k",
                        linewidth=2,
                        label="–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
                    )

                    ax.set_title(
                        f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ {selected_symbols[0]}"
                    )
                    ax.set_xlabel("–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
                    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
                    ax.legend()
                    st.pyplot(fig)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
            st.info(
                """
            **–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?**
            –¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é (–∫–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–æ–π –∫—Ä–∏–≤–æ–π).
            - –ï—Å–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –º–æ–¥–µ–ª—è–º.
            - –ï—Å–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "—Ç–æ–ª—Å—Ç—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤" (–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è), —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–æ–≤.
            """
            )

        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é ---
        elif test_type == "correlation":
            st.write(
                f"**–¢–µ—Å—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–π {selected_symbols[0]} –∏ {selected_symbols[1]}**"
            )
            st.write(
                f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ü–∏—Ä—Å–æ–Ω–∞): {test_result['statistic']:.4f}"
            )
            st.write(f"P-–∑–Ω–∞—á–µ–Ω–∏–µ: {test_result['p_value']:.4f}")
            st.write(f"–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha): {alpha}")

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if abs(test_result["statistic"]) > 0.7:
                if test_result["statistic"] > 0:
                    st.warning(
                        f"–ê–∫—Ü–∏–∏ {selected_symbols[0]} –∏ {selected_symbols[1]} –∏–º–µ—é—Ç —Å–∏–ª—å–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é."
                    )
                else:
                    st.success(
                        f"–ê–∫—Ü–∏–∏ {selected_symbols[0]} –∏ {selected_symbols[1]} –∏–º–µ—é—Ç —Å–∏–ª—å–Ω—É—é –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é."
                    )
            elif abs(test_result["statistic"]) > 0.3:
                st.info(
                    f"–ê–∫—Ü–∏–∏ {selected_symbols[0]} –∏ {selected_symbols[1]} –∏–º–µ—é—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é."
                )
            else:
                st.success(
                    f"–ê–∫—Ü–∏–∏ {selected_symbols[0]} –∏ {selected_symbols[1]} –∏–º–µ—é—Ç —Å–ª–∞–±—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é."
                )

            if test_result["p_value"] < alpha:
                st.write("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞.")
            else:
                st.write("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–Ω–∞—á–∏–º–∞.")
            st.write(test_result["conclusion"])

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
            st.info(
                """
            **–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?**
            –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–∑–º–µ—Ä—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö –∞–∫—Ü–∏–π:
            - **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è**: –∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
            - **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è**: –∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.
            - **–ù–∏–∑–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è**: –¥–≤–∏–∂–µ–Ω–∏—è –∞–∫—Ü–∏–π —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω—ã.
            –î–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ–±—ã—á–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –∞–∫—Ü–∏–∏ —Å –Ω–∏–∑–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π.
            """
            )

        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö ---
        elif test_type == "mean_comparison":
            st.write(
                f"**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–π {selected_symbols[0]} –∏ {selected_symbols[1]}**"
            )
            st.write(
                f"–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {selected_symbols[0]}: {test_result.get('mean1', 0):.6f}"
            )
            st.write(
                f"–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {selected_symbols[1]}: {test_result.get('mean2', 0):.6f}"
            )
            st.write(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ t-—Ç–µ—Å—Ç–∞: {test_result['statistic']:.4f}")
            st.write(f"P-–∑–Ω–∞—á–µ–Ω–∏–µ: {test_result['p_value']:.4f}")
            st.write(f"–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha): {alpha}")

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if test_result["p_value"] < alpha:
                st.success("–°—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã.")
                if test_result.get("mean1", 0) > test_result.get("mean2", 0):
                    st.write(
                        f"–ê–∫—Ü–∏—è {selected_symbols[0]} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å."
                    )
                else:
                    st.write(
                        f"–ê–∫—Ü–∏—è {selected_symbols[1]} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å."
                    )
            else:
                st.info("–°—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è.")
            st.write(test_result["conclusion"])

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
            st.info(
                """
            **–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?**
            –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–≤—É—Ö –∞–∫—Ü–∏–π, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞:
            - –ï—Å–ª–∏ p-–∑–Ω–∞—á–µ–Ω–∏–µ < alpha, —Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞.
            - –ï—Å–ª–∏ p-–∑–Ω–∞—á–µ–Ω–∏–µ >= alpha, —Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤, —á—Ç–æ–±—ã —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, —á—Ç–æ —Å—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è.
            –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∞–∫—Ü–∏—è–º–∏, –Ω–æ —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ä–∏—Å–∫.
            """
            )

    else:
        if test_result and "error" in test_result:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {test_result['error']}")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API.")
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç'.")
