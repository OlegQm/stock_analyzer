import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.ticker import FuncFormatter
from datetime import datetime
import sys
import os
from io import BytesIO

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.app_client import get_available_stocks, get_stock_data

st.set_page_config(page_title="–î–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π", page_icon="üìä", layout="wide")
st.title("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π")
plt.style.use('ggplot')

def format_number(x, pos):
    return f'{int(x):,}'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å matplotlib
def plot_candlestick(df, title):
    fig, ax = plt.subplots(figsize=(12, 6))
    width = 0.6
    width2 = width * 0.8

    up = df[df.Close >= df.Open]
    down = df[df.Close < df.Open]

    ax.bar(up.index, up.Close - up.Open, width, bottom=up.Open, color='green', alpha=0.5)
    ax.bar(up.index, up.High - up.Close, width2, bottom=up.Close, color='green', alpha=0.8)
    ax.bar(up.index, up.Open - up.Low, width2, bottom=up.Low, color='green', alpha=0.8)

    ax.bar(down.index, down.Open - down.Close, width, bottom=down.Close, color='red', alpha=0.5)
    ax.bar(down.index, down.High - down.Open, width2, bottom=down.Open, color='red', alpha=0.8)
    ax.bar(down.index, down.Close - down.Low, width2, bottom=down.Low, color='red', alpha=0.8)

    ax.set_title(title, fontsize=14)
    ax.set_xlabel('–î–∞—Ç–∞')
    ax.set_ylabel('–¶–µ–Ω–∞ ($)')

    if len(df) > 30:
        ax.xaxis.set_major_locator(mdates.MonthLocator())
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
    else:
        ax.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(df) // 10)))
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d %b'))

    plt.xticks(rotation=45)
    plt.tight_layout()

    return fig

with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    available_stocks = get_available_stocks()
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ selectbox
    stock_options = {f"{stock['symbol']} - {stock['name']}": stock['symbol'] for stock in available_stocks}
    # –í—ã–±–æ—Ä –∞–∫—Ü–∏–∏
    selected_stock_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é",
        options=list(stock_options.keys())
    )
    selected_stock = stock_options[selected_stock_display]
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    period_options = {
        "1 –¥–µ–Ω—å": "1d",
        "5 –¥–Ω–µ–π": "5d",
        "1 –º–µ—Å—è—Ü": "1mo",
        "3 –º–µ—Å—è—Ü–∞": "3mo",
        "6 –º–µ—Å—è—Ü–µ–≤": "6mo",
        "1 –≥–æ–¥": "1y",
        "2 –≥–æ–¥–∞": "2y",
        "5 –ª–µ—Ç": "5y",
        "10 –ª–µ—Ç": "10y",
        "–° –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞": "ytd",
        "–ú–∞–∫—Å–∏–º—É–º": "max"
    }
    selected_period_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
        options=list(period_options.keys()),
        index=5
    )
    selected_period = period_options[selected_period_display]

    # –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    interval_options = {
        "1 –¥–µ–Ω—å": "1d",
        "1 –Ω–µ–¥–µ–ª—è": "1wk",
        "1 –º–µ—Å—è—Ü": "1mo"
    }
    # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if selected_period in ["1d", "5d", "1mo"]:
        interval_options.update({
            "1 –º–∏–Ω—É—Ç–∞": "1m",
            "5 –º–∏–Ω—É—Ç": "5m",
            "15 –º–∏–Ω—É—Ç": "15m",
            "30 –º–∏–Ω—É—Ç": "30m",
            "1 —á–∞—Å": "1h"
        })

    selected_interval_display = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª",
        options=list(interval_options.keys()),
        index=0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å
    )
    selected_interval = interval_options[selected_interval_display]

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    fetch_data = st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if fetch_data or 'stock_data' in st.session_state:
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏
        if fetch_data or 'stock_data' not in st.session_state:
            stock_data = get_stock_data(selected_stock, selected_period, selected_interval)
            if stock_data:
                st.session_state['stock_data'] = stock_data
        else:
            stock_data = st.session_state['stock_data']

    if stock_data:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏–∏
        st.subheader(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {stock_data['symbol']}")
        info = stock_data['info']

        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {info.get('longName', '')}")
            st.write(f"**–°–µ–∫—Ç–æ—Ä:** {info.get('sector', '')}")
            st.write(f"**–û—Ç—Ä–∞—Å–ª—å:** {info.get('industry', '')}")
            st.write(f"**–í–µ–±-—Å–∞–π—Ç:** {info.get('website', '')}")
        with col2:
            st.write(f"**–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:** ${info.get('marketCap', 0):,}")
            st.write(f"**P/E (trailing):** {info.get('trailingPE', 'N/A')}")
            st.write(f"**P/E (forward):** {info.get('forwardPE', 'N/A')}")
            st.write(f"**–î–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {info.get('dividendYield', 'N/A')}%")

        st.write(f"**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${info.get('regularMarketPrice', 0):.2f} ({info.get('regularMarketChangePercent', 0):.2f}%)")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        df = pd.DataFrame(stock_data['data'])
        df['Date'] = pd.to_datetime(df['Date'])
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        df_plot = df.copy()
        df_plot.set_index('Date', inplace=True)
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏
        st.subheader(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {stock_data['symbol']}")
        # –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        fig_candle = plot_candlestick(df_plot, f"{stock_data['symbol']} - {selected_period_display}")
        st.pyplot(fig_candle)
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞
        st.subheader(f"–ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ {stock_data['symbol']}")
        fig_volume, ax_volume = plt.subplots(figsize=(12, 4))
        ax_volume.bar(df_plot.index, df_plot['Volume'], color='green', alpha=0.7)
        ax_volume.set_title(f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ {stock_data['symbol']} - {selected_period_display}")
        ax_volume.set_xlabel('–î–∞—Ç–∞')
        ax_volume.set_ylabel('–û–±—ä–µ–º')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        volume_formatter = FuncFormatter(format_number)
        ax_volume.yaxis.set_major_formatter(volume_formatter)

        if len(df_plot) > 30:
            ax_volume.xaxis.set_major_locator(mdates.MonthLocator())
            ax_volume.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
        else:
            ax_volume.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(df_plot) // 10)))
            ax_volume.xaxis.set_major_formatter(mdates.DateFormatter('%d %b'))

        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig_volume)

        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df = df.copy()
        display_df['Date'] = display_df['Date'].dt.strftime('%Y-%m-%d %H:%M:%S')

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        st.dataframe(display_df.sort_values('Date', ascending=False), use_container_width=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        csv = display_df.to_csv(index=False)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV",
            data=csv,
            file_name=f"{stock_data['symbol']}_{selected_period}_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        st.subheader("–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
        col1, col2 = st.columns(2)
        with col1:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
            buf = BytesIO()
            fig_candle.savefig(buf, format="png", dpi=200)
            buf.seek(0)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã",
                data=buf,
                file_name=f"{stock_data['symbol']}_price_{datetime.now().strftime('%Y%m%d')}.png",
                mime="image/png"
            )
        with col2:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞ –≤ –±—É—Ñ–µ—Ä
            buf_volume = BytesIO()
            fig_volume.savefig(buf_volume, format="png", dpi=200)
            buf_volume.seek(0)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞",
                data=buf_volume,
                file_name=f"{stock_data['symbol']}_volume_{datetime.now().strftime('%Y%m%d')}.png",
                mime="image/png"
            )
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
